buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'idea'

repositories {
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
    maven {
        name = "progwml6"
        url =  "http://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    deobfCompile "mezz.jei:jei_${version_minecraft}:${version_jei}"
    compile fileTree(dir: 'lib', include: '*.jar')
}

group = "jeiexporter"
archivesBaseName = "JEIExporter-" + version_minecraft

version = version_major + '.' + version_minor + '.' + version_revis

//adds the build number to the end of the version string if on a build server
if (System.getenv().DRONE_BUILD_NUMBER != null) {
    version += ".${System.getenv().DRONE_BUILD_NUMBER}"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "${version_minecraft}-${version_forge}"
    mappings = "${version_mappings}"
    runDir = "run"

    useDepAts = true

    replace "@VERSION@", project.version

    replaceIn "reference/Reference.java"
    replaceIn "package-info.java"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        expand 'version':"${version_major}.${version_minor}.${version_revis}", 'mcversion':version_minecraft
    }

    from(sourceSets.main.resources.srcDirs) { exclude '**/*.info' }

    // Move access transformers to META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

task sourcesJar(type: Jar, dependsOn: 'sourceMainJava') {
    from "build/sources/main"
    from "build/resources/main"
    classifier "sources"
    destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

artifacts {
    archives sourcesJar, deobfJar
}
